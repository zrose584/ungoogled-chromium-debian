description: gcc 6 needs an explicit hint that these objects should be moved
author: Michael Gilbert <mgilbert@debian.org>

--- a/extensions/browser/api/declarative_webrequest/webrequest_action.cc
+++ b/extensions/browser/api/declarative_webrequest/webrequest_action.cc
@@ -576,7 +576,7 @@ base::Optional<EventResponseDelta> WebRe
   CHECK(request_data.stage & stages());
   EventResponseDelta result(extension_id, extension_install_time);
   result.cancel = true;
-  return result;
+  return std::move(result);
 }
 
 //
@@ -611,7 +611,7 @@ base::Optional<EventResponseDelta> WebRe
     return base::nullopt;
   EventResponseDelta result(extension_id, extension_install_time);
   result.new_url = redirect_url_;
-  return result;
+  return std::move(result);
 }
 
 //
@@ -640,7 +640,7 @@ WebRequestRedirectToTransparentImageActi
   CHECK(request_data.stage & stages());
   EventResponseDelta result(extension_id, extension_install_time);
   result.new_url = GURL(kTransparentImageUrl);
-  return result;
+  return std::move(result);
 }
 
 //
@@ -669,7 +669,7 @@ WebRequestRedirectToEmptyDocumentAction:
   CHECK(request_data.stage & stages());
   EventResponseDelta result(extension_id, extension_install_time);
   result.new_url = GURL(kEmptyDocumentUrl);
-  return result;
+  return std::move(result);
 }
 
 //
@@ -771,7 +771,7 @@ base::Optional<EventResponseDelta> WebRe
 
   EventResponseDelta result(extension_id, extension_install_time);
   result.new_url = GURL(new_url);
-  return result;
+  return std::move(result);
 }
 
 //
@@ -811,7 +811,7 @@ WebRequestSetRequestHeaderAction::Create
   CHECK(request_data.stage & stages());
   EventResponseDelta result(extension_id, extension_install_time);
   result.modified_request_headers.SetHeader(name_, value_);
-  return result;
+  return std::move(result);
 }
 
 //
@@ -849,7 +849,7 @@ WebRequestRemoveRequestHeaderAction::Cre
   CHECK(request_data.stage & stages());
   EventResponseDelta result(extension_id, extension_install_time);
   result.deleted_request_headers.push_back(name_);
-  return result;
+  return std::move(result);
 }
 
 //
@@ -898,7 +898,7 @@ WebRequestAddResponseHeaderAction::Creat
 
   EventResponseDelta result(extension_id, extension_install_time);
   result.added_response_headers.push_back(make_pair(name_, value_));
-  return result;
+  return std::move(result);
 }
 
 //
@@ -952,7 +952,7 @@ WebRequestRemoveResponseHeaderAction::Cr
       continue;
     result.deleted_response_headers.push_back(make_pair(name_, current_value));
   }
-  return result;
+  return std::move(result);
 }
 
 //
@@ -1037,7 +1037,7 @@ base::Optional<EventResponseDelta> WebRe
   EventResponseDelta result(extension_id, extension_install_time);
   result.request_cookie_modifications.push_back(
       request_cookie_modification_.Clone());
-  return result;
+  return std::move(result);
 }
 
 //
@@ -1085,7 +1085,7 @@ base::Optional<EventResponseDelta> WebRe
   EventResponseDelta result(extension_id, extension_install_time);
   result.response_cookie_modifications.push_back(
       response_cookie_modification_.Clone());
-  return result;
+  return std::move(result);
 }
 
 //
@@ -1125,7 +1125,7 @@ WebRequestSendMessageToExtensionAction::
   CHECK(request_data.stage & stages());
   EventResponseDelta result(extension_id, extension_install_time);
   result.messages_to_extension.insert(message_);
-  return result;
+  return std::move(result);
 }
 
 }  // namespace extensions
--- a/device/fido/pin.cc
+++ b/device/fido/pin.cc
@@ -122,7 +122,7 @@ base::Optional<bssl::UniquePtr<EC_POINT>
     return base::nullopt;
   }
 
-  return ret;
+  return std::move(ret);
 }
 
 // static
--- a/extensions/browser/api/declarative_net_request/ruleset_manager.cc
+++ b/extensions/browser/api/declarative_net_request/ruleset_manager.cc
@@ -452,7 +452,7 @@ RulesetManager::GetRedirectOrUpgradeActi
     Action action(Action::Type::REDIRECT);
     action.redirect_url = std::move(redirect_action.redirect_url);
     action.extension_ids.push_back(ruleset->extension_id);
-    return action;
+    return std::move(action);
   }
 
   return base::nullopt;
@@ -476,7 +476,7 @@ base::Optional<RulesetManager::Action> R
 
   PopulateHeadersFromMask(mask, &action.request_headers_to_remove,
                           &action.response_headers_to_remove);
-  return action;
+  return std::move(action);
 }
 
 RulesetManager::Action RulesetManager::EvaluateRequestInternal(
--- a/third_party/blink/renderer/modules/manifest/manifest_parser.cc
+++ b/third_party/blink/renderer/modules/manifest/manifest_parser.cc
@@ -622,7 +622,7 @@ ManifestParser::ParseShareTarget(const J
     return base::nullopt;
   }
 
-  return share_target;
+  return std::move(share_target);
 }
 
 base::Optional<mojom::blink::ManifestFileHandlerPtr>
@@ -648,7 +648,7 @@ ManifestParser::ParseFileHandler(const J
     return base::nullopt;
   }
 
-  return file_handler;
+  return std::move(file_handler);
 }
 
 String ManifestParser::ParseRelatedApplicationPlatform(
--- a/device/fido/device_response_converter.cc
+++ b/device/fido/device_response_converter.cc
@@ -549,7 +549,7 @@ base::Optional<cbor::Value> FixInvalidUT
                                            PathPredicate predicate) {
   if (!ContainsInvalidUTF8(in)) {
     // Common case that everything is fine.
-    return in;
+    return std::move(in);
   }
 
   std::vector<const cbor::Value*> path;
