description: fix for gcc explicit specialization namespace issue
author: Michael Gilbert <mgilbert@debian.org>

--- a/third_party/blink/renderer/platform/fonts/shaping/shape_result_inline_headers.h
+++ b/third_party/blink/renderer/platform/fonts/shaping/shape_result_inline_headers.h
@@ -69,9 +69,46 @@ class ShapeResult::GlyphOffset final : p
  public:
   using FloatSize::FloatSize;
 
+  GlyphOffset() {}
+
   explicit GlyphOffset(const FloatSize& other) : FloatSize(other) {}
 };
 
+namespace internal {
+
+    // A return value of |GetOffsets()| to represent optional |GlyphOffset|
+    // array.
+    template <bool has_non_zero_glyph_offsets>
+    struct iterator final {};
+
+    // For non-zero glyph offset array
+    template <>
+    struct iterator<true> final {
+      // The constructor for ShapeResult
+      explicit iterator(const ShapeResult::GlyphOffset* offset, bool check)
+          : pointer(offset) {
+        DCHECK(pointer);
+      }
+
+      ShapeResult::GlyphOffset operator*() const { return *pointer; }
+      void operator++() { ++pointer; }
+
+      const ShapeResult::GlyphOffset* pointer;
+    };
+
+    // For zero glyph offset array
+    template <>
+    struct iterator<false> final {
+      explicit iterator(const ShapeResult::GlyphOffset* offset, bool check) {
+        DCHECK(!check);
+      }
+
+      ShapeResult::GlyphOffset operator*() const { return ShapeResult::GlyphOffset(); }
+      void operator++() {}
+    };
+
+}  // namespace internal
+
 struct ShapeResult::RunInfo : public RefCounted<ShapeResult::RunInfo> {
   USING_FAST_MALLOC(RunInfo);
 
@@ -246,51 +283,15 @@ struct ShapeResult::RunInfo : public Ref
                 AllocateStorage());
     }
 
-    // A return value of |GetOffsets()| to represent optional |GlyphOffset|
-    // array.
-    template <bool has_non_zero_glyph_offsets>
-    struct iterator final {};
-
-    // For non-zero glyph offset array
-    template <>
-    struct iterator<true> final {
-      // The constructor for ShapeResult
-      explicit iterator(const GlyphOffsetArray& array)
-          : pointer(array.storage_.get()) {
-        DCHECK(pointer);
-      }
-
-      // The constructor for ShapeResultView
-      explicit iterator(const GlyphDataRange& range) : pointer(range.offsets) {
-        DCHECK(pointer);
-      }
-
-      GlyphOffset operator*() const { return *pointer; }
-      void operator++() { ++pointer; }
-
-      const GlyphOffset* pointer;
-    };
-
-    // For zero glyph offset array
-    template <>
-    struct iterator<false> final {
-      explicit iterator(const GlyphOffsetArray& array) {
-        DCHECK(!array.HasStorage());
-      }
-      explicit iterator(const GlyphDataRange& range) { DCHECK(!range.offsets); }
-      GlyphOffset operator*() const { return GlyphOffset(); }
-      void operator++() {}
-    };
-
     template <bool has_non_zero_glyph_offsets>
-    iterator<has_non_zero_glyph_offsets> GetIterator() const {
-      return iterator<has_non_zero_glyph_offsets>(*this);
+    internal::iterator<has_non_zero_glyph_offsets> GetIterator() const {
+      return internal::iterator<has_non_zero_glyph_offsets>(this->GetStorage(),this->HasStorage());
     }
 
     template <bool has_non_zero_glyph_offsets>
-    iterator<has_non_zero_glyph_offsets> GetIteratorForRange(
+    internal::iterator<has_non_zero_glyph_offsets> GetIteratorForRange(
         const GlyphDataRange& range) const {
-      return iterator<has_non_zero_glyph_offsets>(range);
+      return internal::iterator<has_non_zero_glyph_offsets>(range.offsets,range.offsets);
     }
 
     unsigned size() const { return size_; }
@@ -404,7 +405,7 @@ struct ShapeResult::RunInfo : public Ref
     }
 
     template <bool has_non_zero_glyph_offsets>
-    GlyphOffsetArray::iterator<has_non_zero_glyph_offsets> GetOffsets() const {
+    internal::iterator<has_non_zero_glyph_offsets> GetOffsets() const {
       return offsets_.GetIterator<has_non_zero_glyph_offsets>();
     }
 
--- a/third_party/blink/renderer/platform/fonts/shaping/shape_result_view.cc
+++ b/third_party/blink/renderer/platform/fonts/shaping/shape_result_view.cc
@@ -44,10 +44,9 @@ struct ShapeResultView::RunInfoPart {
     return *(range_.begin + index);
   }
   template <bool has_non_zero_glyph_offsets>
-  ShapeResult::RunInfo::GlyphOffsetArray::iterator<has_non_zero_glyph_offsets>
+  internal::iterator<has_non_zero_glyph_offsets>
   GetGlyphOffsets() const {
-    return ShapeResult::RunInfo::GlyphOffsetArray::iterator<
-        has_non_zero_glyph_offsets>(range_);
+    return internal::iterator<has_non_zero_glyph_offsets>(range_.offsets,range_.offsets);
   }
   bool HasGlyphOffsets() const { return range_.offsets; }
   // The end character index of |this| without considering offsets in
